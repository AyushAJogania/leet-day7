#include <iostream>
#include <vector>
#include <unordered_map>

class Solution {
public:
    std::vector<std::string> letterCombinations(std::string digits) {
        std::vector<std::string> result;
        if (digits.empty()) return result;

        std::unordered_map<char, std::string> phoneMap = {
            {'2', "abc"},
            {'3', "def"},
            {'4', "ghi"},
            {'5', "jkl"},
            {'6', "mno"},
            {'7', "pqrs"},
            {'8', "tuv"},
            {'9', "wxyz"}
        };

        std::string current;
        backtrack(digits, 0, phoneMap, current, result);
        return result;
    }

private:
    void backtrack(const std::string& digits, int index, const std::unordered_map<char, std::string>& phoneMap, std::string& current, std::vector<std::string>& result) {
        if (index == digits.length()) {
            result.push_back(current);
            return;
        }

        char digit = digits[index];
        const std::string& letters = phoneMap.at(digit);
        for (char letter : letters) {
            current.push_back(letter);
            backtrack(digits, index + 1, phoneMap, current, result);
            current.pop_back();
        }
    }
};

